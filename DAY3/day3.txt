1.模型 - Models
    1.ORM框架
        ORM: Object Relational Mapping
        三大特征:
            1.表到类的映射
            2.数据类型的映射
            3.关系映射
    2.创建 和 配置 数据库
        1.创建数据库
          create database webdb default charset utf8 collate utf8_general_ci;
        2. Django中的数据库配置
            setting.py中找到DATABASES变量

            DATABASES = {
                            'default': {
                                'ENGINE': 'django.db.backends.sqlite3',
                                'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
                            }
                        }

            1.ENGINE
                指定数据库引擎,mysql的引擎
                django.db.backends.mysql 
            2.NAME
              指定要连接的数据库的名称
              'NAME':'webdb'
            3.USER
              指定要登录到数据库的用户名称
              'USER':'root'
            4.PASSWORD
              指定登录到数据库的用户密码
              'PASSWORD':'123456'
            5.HOST
              指定要连接到的主机地址
              'HOST':'localhost'
            6.PORT
              指定要连接到的主机的端口号
              'PORT':3306
        
        3.Django中的数据库迁移
            1.   ./manage.py makemigrations
                作用:将每个应用下的model.py文件生成一个中间迁移文件,并将中间文件保存在migrations的目录中
            
            2.   ./manage.py migrate
                作用:将每个应用下migrations目录中的中间文件同步回数据库
        
        4.编写Models
            1.编写实例
            见代码
            应用中的 models.py 文件
            2.Models的语法规范
            class ClassName(models.Model):
                # 属性 = models.字段类型(字段选项)
                NAME = models.FIELDTYPE(FIELDOPTIONS)
                1.ClassName
                实体类名称,表名组成的一个部分
                默认表明组成规范:
                    应用名称_CLASSNAME
                2.NAME
                属性名,映射回数据库就是字段的名称
                3.FIELDTYPE
                字段类型:映射到表中的字段的类型        
                    1.BooleanField()
                        编程语言中使用 True 和 False 表示该列的值
                        数据库中使用 1 和 0来表示具体的值
                        数据库中的数据类型为:tinyint
                    2.CharField()
                        编程语言中使用 字符串 来表示该列的值
                        数据库中的数据类型为:varchar
                        注意:必须要制定max_length参数值
                    3.DateField()
                        编程语言中使用 字符串 或 date类型的数据表示该列的值
                        数据库中的数据类型为:date
                    4.DateTimeField()
                        同上
                        数据库中的数据类型为:DateTime
                    5.DecimalField()
                        编程语言中使用小数来表示该列的值
                        数据库中使用 decimal
                        money=models.DecimalField(max_digits=7,decimal_places=2) 
                        数字总共7位,小数2位
                    6.FloatField()
                        数据库中使用 : float
                    7.IntegerField()
                        数据库中使用 : int
                        编程语言和数据库中都使用整数
                    8.EmailField()
                        编程语言中使用 字符串 表示该列的值
                        数据库中使用 : varchar
                    9.URLField()
                        编程语言中使用 字符串 表示该列的值
                        数据库中使用 : varchar
                    10.ImageField()
                        作用:存储图片路径
                        数据库中使用 : varchar
                        image = models.ImageField(upload_to='image/users/')
                        注意:
                            必须指定上传路径
                            所以在后台上传时会自动的将文件保存在指定目录处

                4.FIELDOPTIONS
                    字段选项,指定创建列的额外信息
                    1.primary_key
                        如果设置为True,表示该列为主键
                    2.null
                        如果设置为True,表示该列允许为空,默认为False
                    3.default
                        设置所在列的默认值
                    4.db_index
                        如果设置为True,则为所在列添加索引
                    5.unique
                        如果设置为True,表示所在列的值要唯一
                    6.db_column
                        指定映射到列的列名,如果不指定的话,则采用属性名称作为列名

                    练习:
                        在index应用中再追加两个model类
                        1.Author - 作者
                            1.name - 姓名
                            2.age - 年龄
                            3.email - 邮箱(允许为空)
                        2. Book - 图书
                            1.title - 书名
                            2.publicate_date - 出版时间 
                5.相关指令:
                    1.通过数据库自动导出models 
                        ./manage.py inspectdb > 文件名.py (将项目中数据库中的表以实体类的形式体现导出)     
                    2.数据的版本切换
                        1.  ./manage.py migrate
                            作用:执行所有应用中最新版本的数据库迁移文件
                        2.  ./manage.py migrate 应用名称 版本号 (数据库事件回滚)
                            ./manage.py migrate index 0001
    3.数据的CRUD
        1.增加数据
            1.使用 Entry.objects.create(属性=值,属性=值)
                Entry:可以表示任意一个实体类
                返回值:将创建好的实体对象进行返回
            2.创建 Entry 对象,并通过对象.save()进行保存
                obj = Entry(属性=值,属性=值)
                obj.属性=值
                obj.save()
                注意:该方法无返回值,obj会被重新赋值
            3.使用字典创建对象,并通过save()进行保存
                dic = {
                "属性":"值",
                "属性":"值",
                }
                obj = Entry(**dic)
                obj.save()
                注意:该方法无返回值,obj会被重新赋值
            
            练习:使用以上三种方式,向BOOk和Publisher表中各添加至少三条数据
        2.查询数据
            通过 Entry.objects 属性调用查询接口
            ex:
                Entry.objects.all()
                Entry.objects.filter()
                .... ....
            所有的查询接口的后面,都可以通过一个query属性来得到对应的sql语句

            1.基本查询操作
                语法:all()
                用法:Entry.objects.all()
                作用:查询Entry实体中所有行所有列的记录
                SQL:select * from Entry;
                返回:QuerySet
                    1.所有的QuerySet都可以通过query属性得到对应的SQL语句
                    2.所有的QuerySet都可以当成列表操作进行循环遍历...等操作
            2.查询返回指定列
                语法:values() | values('列1','列2')
                用法:
                Entry.objects.values('列1','列2')
                Entry.objects.all().values('列1','列2')
                返回:QuerySet,会将查询出来的部分列封装到字典中再封装到列表中

            3.查询返回指定列
                语法:values_list('列1','列2')
                用法:同上
                返回:QuerySet,会将查询出来的数据先封装到元组中再封装到列表中

            练习:
                1.创建路由 /03-queryall
                2.查询Author实体中所有的数据,并渲染到03-queryall.html模板上
                3.在03-queryall.html模板上显示所有的数据
                姓名    年龄    邮箱    操作
            
            4.根据条件查询部分行数据
                语法:filter(条件)
                用法:Entry.objects.filter()
                返回:QuerySet
                ex:
                1.查询 id 为1的Book的信息
                    list = Book.objects.filter(id=1)
                2.查询 publicate_date 为 2015-10-12 的Book
                    list = Book.objects.filter(publicate_date='2015-10-12')
                3.查询 id为1并且publicate_date为2015-10-12的Book 的信息
                    Book.objects.filter(id=1,publicate_date='2015-10-12')
                如果需要非等值条件查询的话,可以使用Django提供的查询谓词来实现.
                 Django:Field Lookup
                 查询谓词:是一个独立的查询功能
                    语法:filter(属性_查询谓词=值)
                    Entry.objects.filter(属性__谓词=值)
                    ex:
                        __exact:等值匹配
                        __contains:包含指定值
                        __in:在指定范围内的值
                        __gt:大于指定值
                        __gte:
                        __lt:
                        __lte:
                        __startswith:以xxx作为开始
                        __endswith:以xxxx作为结束
                        __range:在指定区间范围
                        __date:获取日期部分数据
                        __year:获取年
                        ...
                    练习:
                        1.查询Author表中age大于95的author信息
                        2.查询Author表中所有姓鲁的人的信息
                        3.查询Author表中Email中包含'sh'的人的信息
                        4.查询Author表中Age大于'鲁迅'的age的人的信息
                        authors = Author.objects.filter(age__gt=(Author.objects.filter(name='鲁迅').values('age'))).values('name','age')
            
            5.不等条件的筛选
                语法：exclude(条件)
                用法：Entry.objects.exclude(条件)

            6.排序查询
                语法：order_by('列1','-列2')
                用法：Entry.objects.order_by('列')
                默认是升序排序，如果想要降序则在列名前添加 - 即可
            
            7.只查询一条数据
                语法:get(条件)
                作用:查询只能返回一条数据
                用法:Entry.objects.get('条件')
                注意:
                该方法只能返回一条数据
                查询结果多余一条或没有查询结果的话都会抛出异常

                
          