1.ORM 操作 CRUD 
    1.查询(接着day3笔记查询部分笔记)
        1.聚合查询(不带分组)
            语法：aggregate()
            用法：Entry.objects.aggregate(自定义名=聚合函数('列'))
            聚合函数：
                from diango.db.models import Avg,count,Sun,Max,Min
                1. Avg() : 平均值
                2. Sum() : 和
                3. Count() : 数量
                4. Min() : 最小值
                5. Max() : 最大值
        2.聚合查询(带分组)
            语法: annotate()
            用法:Entry.objects.values('分组列名').annotate(列=聚合函数('列')).values('查询列名')

    2.修改
        1.修改单个个体
            1.查
                通过 get()得到要修改的实体对象
            2.改
                通过得到的对象取修改属性值
            3.保存
                通过对象.save()保存数据回数据库
                
        2.批量修改
            直接调用QuerySet的update(属性=值)实现批量修改
            e.g.
            QuerySet的update(属性=值,属性=值)


    3.删除
        说明:调用实体对象/查询结果集的 delete()实现删除
        注意:今日代码中并没有删除对象,而是将对象中的isActive属性修改为了False
        1.删除单个对象
        au = Author.objects.get(id=1)
        au.delete()
        or: Author.objects.get(id=1).delete()
        2.批量删除对象
        list = Author.objects.all()
        list.delete()  
        or: Author.objects.all().delete()

    4.F查询 和 Q查询 (代码在views.py中的update08函数中)
        1.F查询 - F()
            ex : Author表中所有人的年龄+10岁
                update index_author set age = age + 10

            Author.objects.all().update(age=age+10)


                1.作用:在执行操作过程中用于获取某列的值
                2.语法: F('列名')
                from django.db.models import F
                django :
                Author.objects.all().update(age=F('age')+10)
                3.示例:
                    更新Author表中所有的数据的age都加10岁
                    Author.objects.all().update(age=F('age')+10)
            
        2.Q查询 - Q()
            1.作用:在查询条件中来实现 or 的操作的
            2.语法:
                from django.db.models import Q
                Q(条件1)|Q(条件2)
                示例:Author.objects.filter(Q(id=1)|Q(isActive=True))
        

    5.原生的数据库操作方法(不做重点,Django中orm框架中的API数据库操作函数已经够处理业务问题)
        1.查询
        函数:raw(sql语句)
        语法:Entry.objects.raw(sql)
        返回值:QuerySet
        2.增删改
        from django.db import connection
        def doSQL(request):
            # 更新index_author表所有数据的isActive=1
            with connection.cursor() as cursor
            sql = "update/insert/delete ... "
            sql = 'update index_author set isActive=1'
            cursor.execute(sql)
            return ...
2. 使用后台管理models
    1.后台的配置(前提是创建和映射好数据库)
        登录地址:http://localhost:8000/admin

        使用指令创建后台管理员:
        ./manage.py createsuperuser

        Username : 输入用户名,如果为空则采用系统账户登录名
        Email Address : 电子邮件,允许为空
        Password : 密码
        Password(agian) :
        注意:创建好的后台管理员数据存在数据库中的auth_user表中
    2.基本的数据管理
        1.在应用中的 admin.py 中注册要管理的实体类(每个应用中都会对应有一个admin.py和models.py文件,在哪个应用下注册,就会管理相对应的Model实体类)
            1.admin.py
                作用:注册需要管理的Models类,只有在此注册的Models类才允许被管理
            2.注册Models
                from django.contrib import admin
                from .models import *

                admin.site.register(Entry)
        2.定义Models的展现形式(后台管理页面上)
            1.通过 __str__ 定义展现形式
                class Author(models.Model)
                    xxxx xxxx
                    
                    def __str__(self):
                        return self.name
                
            2.通过 verbose_name 字段选项,修改名称  (针对字段)
                name = models.CharField(max_length=30,verbose_name='姓名')

            3.通过Meta内部类 修改展现形式
                class Author(models.Model)
                    class Meta:
                        1.db_table
                           指定当前类映射到表的名称(该属性设置完成后,立即同步数据库,命令行输入指令:./manage.py makemigrations  ./manage.py migrate)
                        2.verbose_name
                            定义实体类在admin中的显示名称(单数)
                        3.verbose_name_plural
                            效果同上(复数)
                        4.ordering
                            指定数据在后台管理中的排序方式(取值为一个列表,默认升序排列)
        
        练习:
            1.修改publisher 后台管理功能
                1.更改表名为publisher
                2.修改后台的展示名称 - 出版社
                3.修改每个属性对应的中文名称
            2.修改Book后台管理功能
                1.更改表名为book
                2.修改后台的展示名称 - 书籍
                3.修改每个属性对应的中文名称
                4.指定排序方式 - 按出版时间倒序排序
    3.高级管理
        1.在 admin.py 中创建高级管理类并注册
            1.定义 EntryAdmin 类 继承自 admin.ModelAdmin
                class AuthorAdmin(admin.ModelAdmin):
                    pass
            2.注册高级管理类(不再后面追加创建的自定义高级类,就会不起作用)
                在admin.py中进行注册
                admin.site.register(Entry,EntryAdmin)
        2.在EntryAdmin类中增加的属性
            1.list_display
                作用:定义在 列表页 上要显示的字段们
                取值:由 属性名 组成的列表 或 元组
                设置后在列表页会出现更详细的字段们
                效果见 1.png
                原效果 Yuan.png

            2.list_display_links(可以点击的超链接)
                作用:定义在 列表页 上点击也能够跳转到详情页上的字段们
                取值:同上
                注意:取值必须要出现在list_display中

            3.list_editable
                作用:定义在 列表页 上就允许被编辑的字段们
                取值:同上
                注意:list_editable取值必须要出现在list_display中,但不能出现在 list_display_links中
            
            练习:  效果图见 2.png
            # 定义高级管理类
            class AuthorAdmin(admin.ModelAdmin):
                # 1.定义在列表页上所显示的字段们
                list_display = ('name','age','email')
                # 2.定义在列表页上能够链接的字段们
                list_display_links = ('name','email')
                # 3.定义在列表页上能够被修改的字段们
                list_editable = ('age',)

            4.search_fields (比较使用的搜索功能)
                作用:添加允许被搜索的字段们
                取值:由 属性名 组成的列表 或 元组
            5.list_filter
                作用:在列表页的右侧增加过滤器,实现快速筛选
                取值:同上
            6.date_hierarchy
                作用: 在列表页的顶部增加时间选择器
                取值: 只能取一个值: 必须是 DateField / DateTimeField
            7.fields
                作用:在详情页中指定显示哪些字段以及他们的顺序
                取值:由属性名组成的元组或列表(取值的顺序决定顺序,不写不显示)
            8.fieldsets
                作用:在详情页中对字段们进行分组显示
                注意:fieldsets 和 fields 不能同时声明,共存
                取值:
                    fieldsets = (
                        #分组1
                        ('组名',{
                            'fields':('属性1','属性2',...),
                            'classes':('collapse',)
                        }),
                        #分组2
                        ()
                    )


                fieldsets练习:定义详情页中的字段分组,效果图见zufen.png
                    fieldsets = (
                        #分组1:组名:基本选项,字段:name,email
                        ('基本选项',{
                            'fields':('name','email')
                        }),
                        #分组2:组名:可选选项,字段:age,isActive 可折叠
                        ('可选选项',{
                            'fields':('age','isActive'),
                            'classes':('collapse',)
                        })
                    )


            综合练习:
                完成Publisher的高级管理功能
                    1.在列表页中显示 name,address,city 属性
                    2.address 和 city 是可编辑的
                    3.右侧增加过滤器,允许按照city筛选
                    3.顶部增加搜索框,按照city,address,name,website进行筛选
                    4.详情页中显示(分组显示)
                        1.name,address,city 为 "基本信息"
                        2.country,website 为 "高级信息" 并可以折叠     
3.关系映射
    1.一对一映射
        1.语法
            关联的两个类中的任意一个类中:
            属性=models.OneToOneField(Entry)  记得加null=True
        2.示例
            class Author(models.Model):
                .... ....

            class Wife(models.Model):
                .... ....
                #增加对 Author 的一对一引用
                author = models.OneToOneField(Author,null=True)
            
            在数据库中:
                生成一个个外键列(author_id)在Wife表中,并会应用在Author表中的主键
            在 Author 实体中:
                会增加一个隐式属性属性 - wife , 用来表示author所对应的wife
        
        3.数据管理
            1.增加数据
                    # 方式1:通过author_id属性关联
                    # wife = Wife()
                    # wife.name = '李夫人'
                    # wife.age = 17
                    # wife.author_id = 8
                    # wife.save()

                    # 方式2:通过author对象去关联
                    # au = Author.objects.get(name='鲁迅')
                    # wife = Wife()
                    # wife.name = '鲁夫人'
                    # wife.age = 96
                    # wife.author = au
                    # wife.save()

            2.查询
                1.正向查询 : 直接通过关联属性查询
                    通过 wife 找 author
                    wife = Wife.objects.get(id=1)
                    author = wife.author
                2.反向查询 : 通过隐式属性查找
                    通过 author 查找 wife
                    author = Author.objects.get(id=1)
                    wife = author.wife
                
                练习:
                    1.查询 巴金 的夫人的信息
                    2.查询 金夫人 的对应的Author的信息


    2.一对多映射
        1.数据库中实现的语法
            在"多"表中增加外键表示对"一"表的主键的引用
        2.Django中体现
            在 "多" 实体类中增加对 "一" 实体类引用
            ex:
                一个出版社允许出版多本图书
                一个图书只能属于一个出版社
            出版社(1):图书(多)
            出版社(Publisher)对书籍(Book)是一(Publisher)对多(Book)的关系

            语法: entry = models.ForeignKey(Entry)

            class Publisher(models.Model):
                xxxx xxxx
            
            class Book(models.Model):
                xxxx xxxx
                publisher = models.ForeignKey(Publisher)
            
            注意: 在一对多的关系中,在多的实体类中创建关联属性:entry = models.ForeignKey(Entry)
            
        3.数据管理
            1.增加关联数据
				1.通过 book.publisher_id 插入关联数据 - 通过publisher_id
					book = Book.objects.get(xxx)
					book.publisher_id = 1
					book.save()
                    代码见: 函数 dtd_views()
				2.通过 book.publisher 插入关联数据 - 通过关联属性publisher
					book = Book.objects.get(xxx)
					pub = Publisher.objects.get(id=2)
					book.publisher = pub
					book.save()
            2.增加全新的数据并且附带关联关系
                    book = Book(title='激荡十年',publicate_data='2010-01-09')
                    book.publisher_id = 2
                    book.save()
			3.查询数据
				1.正向查询
					通过 Book 查询 Publisher  - 利用绑定的关联属性 直接用对象查询
					book = Book.objects.get(id=1)
					pub = book.publisher
				2.反向查询
					通过 Publisher 查询对应的所有的 Book
					Django会在Publisher中增加一个属性表示对Book的查询引用
					属性 ：book_set --> (Entry.objects)

            
    3.多对多映射             
        1.数据库中体现
            通过第三张表去关联多对多的两张表
        2.语法
            在关联的两个类中的任意一个类,增加:
                属性 = models.ManyToManyField(Entry)
            ex:
                一个作者可以出版多本书,并且一本书可以由多个作者创作
                Author(多) - Book(多)

            class Author(models.Model):
                xxxx xxxx

            class Book(models.Model):
                xxxx xxxx
                author_set = models.ManyToManyField(Author)

        3.数据管理
            1.增加数据
                1.通过关联属性的add()方法实现数据增加
            2.删除数据
                通过关联属性的remove()实现删除数据
            3.查询数据      
                1.正向查询
                    通过Book查询Author,可以通过关联属性来表示对Author的查询对象 --> 类似于objects
                    示例:查询射雕英雄传对应的所有作者
                    book = Book.objects.get(title='射雕英雄传')
                    book.author_set.all()
                2.反向查询
                    通过Author查询Book,可以通过django所增加的隐式属性book_set来获取对应book的查询
                    实例:查看金庸所出版的图书
                        author = Author.objects.get(name='鲁迅')
                        books = author.book_set.all()
                               
