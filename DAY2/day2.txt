1.路由系统
    1.路由改版
      访问路径: localhost:8000/music/index
      改版路径: localhost:8000/music/
        访问 index()视图处理函数


      访问路径: localhost:8000/index/index
      改版路径: localhost:8000/
        访问 index 应用中的 index() 视图函数


      访问路径: localhost:8000/login
        访问 index 应用中的login() 视图函数

      访问路径: localhost:8000/register
        访问 index 应用中的 register() 视图函数

2.Django中的模板 -Template
    1.Django中的模板
      Django中的模板引擎是由Django自己提供,并不是Jinja2,所以Django中的模板语法与Flask中的模板语法会稍有不同
    2.模板的设置
        在 settings.py 中 , 有一个 TEMPLATES 变量
        1.BACKEND:指定要使用的模板的引擎
        2.DIRS:指定模板的存放目录们
          1.什么都不写:Django会自动的到每个应用中搜索一个叫做templates的目录来作为模板的存放目录
          2.如果写东西:则按照写好的路径去搜索
        3.APP_DIRS : 是否要自动搜索应用中的目录
          True:表示要自动搜索应用中的templates目录
    3.模板的加载方式
        1.通过 loader 对象获取模板,再通过HttpResponse进行响应(不推荐使用)
          from django.template import loader
          #1.通过 loader 加载模板
          t = loader.get_template("模板名称")
          #2.将模板渲染成字符串
          html = t.render()
          #3.将字符串通过HttpResponse响应给客户端
          return HttpResponse(html)

        2.通过 render() 加载并响应模板(推荐使用render)
          from django.shortcuts import render
          return render(request,'模板名称')

    4.模板中的语法
        1.变量
          1.作用:将后端的数据传递给模板进行显示
          2.在Django中允许作为变量传递给模板的数据类型
            字符串,数字,列表,元组,字典,函数,对象
          3.变量的语法
            1.**变量们必须要封装到字典中才能传递给模板** (跟flask的区别)
              dic = {
                'name':'wangwc',
                'age' : 30,
                'gender' : '男',
              }

              1.使用 loader 加载模板
                t = loader.get_template('xxx.html')
                html = t.render(dic)
                return HttpResponse(html)
              2.使用 render 加载模板
                return render(request,'xxx.html',dic)
            2.在模板中使用变量
              {{变量名}}

              return render_template('xxx.html',name='wangwc',age=30,gender='男')

              return render_template('xxx.html',params=locals())

        2.标签
          1.作用
            将服务器端功能嵌入到模板中
          2.语法
            {% 标签内容 %}
          3.常用标签
            1.for
              语法:
                {% for 变量 in 元组|列表|字典(可迭代的变量) %}
                {% endfor %}

              内置变量:forloop
                允许通过forloop得到本次循环的一些信息
                forloop.counter : 当前循环遍历的次数
                forloop.first : 判断是否为第一次循环
                forloop.last : 判断是否为最后一次循环

            2.if
              语法
                1.
                  {% if xxx %}
                  {% endif %}
                2.
                  {% if xxx %}
                  {% else %}
                  {% endif %}
                3.
                  {% if xxx %}
                  {% elif xxx %}
                  {% else %}
                  {% endif %}

              ** lianxi.html
              练习:
                ['孙悟空', '西门庆', '曹操', '林黛玉']
                在模板中循环遍历,
                第一项的内容背景颜色为红色(red)
                最后一项的内容背景颜色为黄色(yellow)
                中间两项内容的背景颜色为粉色(pink)
        3.过滤器
          1.什么是过滤器
            在变量输出显示之前,要对变量进行筛选和过滤
          2.语法
            {{变量|过滤器:参数}}
        4.静态文件
          1.什么是静态文件
            不能被解释器动态解析的文件就是静态文件
          2.Django中的静态文件的处理(配置)
            (Django中必须要设置静态文件相关信息之后才能使用)
            在 settings.py 中设置以下静态文件相关信息
            1.设置静态文件的访问路径
                STATIC_URL = "/static/"
                如果访问路径是http://localhost:8000/static/xxx的时候,那么就到
                静态文件的存储目录中去查找静态文件而不走路由的解析
                
            2.设置静态文件的存储目录
                指定静态文件保存在服务器上的哪个文件夹中
                STATICFILES_DIRS=(os.path.join(BASE_DIR,'static'),)
                静态文件目录的存放位置:
                  1.在项目的根目录处创建一个 static 目录,用于保存静态文件
                  2.每个应用中也可以创建一个 static 目录,用于保存静态文件
            3.访问静态文件
              1.通过静态文件访问路径去访问
                /static/images/xxxx.jpg
                e.g.
                    <img src='http://localhost:8000/static/images/aa.jpg'>
              2.使用 {% static %} 访问静态资源(动态获取静态资源的访问路径,静态的文件的访问路径改变后,不需要更改路径)
                {% static %}表示的就是静态资源的访问路径
                1.在模板的最顶层增加
                  {% load static %}
                2.在使用静态资源时
                  <img src="{% static 'images/xxxx.jpg'%}">
              练习：
                1.创建项目 - FruitDay,并创建应用 index
                2.搭建模板和静态文件
                3.搭建首页模板 - index.html
                4.设置静态文件的相关配置
                5.将index.html的静态文件改成Django版本
              步骤:
                  1. 利用pycharm创建一个django应用
                  2. 终端命令行 新建一个应用 ./manage.py startapp index
                  3. 主文件setting.py 设置 python3 并且 注册 app 名字添加进去
                  4. 然后设置version 3.0版路由(省略...)
                  5. 在setting.py中设置静态文件的访问路径和存储目录,两行代码
                  6. 在根目录下创建static文件夹放入静态文件,修改html中的静态文件路径
        5.模板的继承
          1.在父模板中
            标识出哪些内容在子模板中允许被重写
            {% block 块名 %}
              xxxx xxxx
            {% endblock %}
            block 作用:
              1.在父模板中正常显示
              2.在子模板中,允许被修改
                如果不修改的话,则按照父模板的内容来显示
          2.在子模板中
            1.指定继承自哪个父模板
              {% extends '父模板名称' %}
            2.覆盖父模板中的内容
              {% block 块名 %}
              {% endblock %}
          练习:实现FriutDay中的登录和注册
            1. http://localhost:8000/login
              能够看到 login.html 模板
            2. http://localhost:8000/register
              能够看到 register.html 模板
            3.让 register.html 模板 继承自 login.html
              并按照register的样式进行修改
        6.url()的name参数
          1.url()语法
            url(regex,views,kwargs,name)
              name:为了给当前的url起别名,在反向解析地址时使用
          2.反向解析
            通过url()的别名生成对应的访问地址
            1.在模板上做反向解析
              1.基本解析
                {% url '别名' %}
              2.带参数解析
                {% url '别名' '参数1' '参数2' %}
                所有的参数一律是字符串
              3.使用场合:
                1.访问路径过长时,推荐使用别名访问
                2.访问地址经常变换时,推荐使用别名

            2.在视图上做反向解析
              1.基本解析
                url = reverse('别名')
                url 就是通过别名解析出来的地址
              2.带参数解析
                url = reverse('别名',args=('参数1','参数2')